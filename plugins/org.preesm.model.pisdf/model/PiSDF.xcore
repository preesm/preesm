/**
 * Copyright or Â© or Copr. IETR/INSA - Rennes (2018 - 2020) :
 *
 * Alexandre Honorat [alexandre.honorat@insa-rennes.fr] (2018 - 2020)
 * Antoine Morvan [antoine.morvan@insa-rennes.fr] (2018 - 2019)
 * Florian Arrestier [florian.arrestier@insa-rennes.fr] (2018 - 2020)
 * Dylan Gageot [gageot.dylan@gmail.com] (2019)
 * Julien Heulot [julien.heulot@insa-rennes.fr] (2020)
 *
 * This software is a computer program whose purpose is to help prototyping
 * parallel applications using dataflow formalism.
 *
 * This software is governed by the CeCILL  license under French law and
 * abiding by the rules of distribution of free software.  You can  use,
 * modify and/ or redistribute the software under the terms of the CeCILL
 * license as circulated by CEA, CNRS and INRIA at the following URL
 * "http://www.cecill.info".
 *
 * As a counterpart to the access to the source code and  rights to copy,
 * modify and redistribute granted by the license, users are provided only
 * with a limited warranty  and the software's author,  the holder of the
 * economic rights,  and the successive licensors  have only  limited
 * liability.
 *
 * In this respect, the user's attention is drawn to the risks associated
 * with loading,  using,  modifying and/or developing or reproducing the
 * software by the user in light of its specific status of free software,
 * that may mean  that it is complicated to manipulate,  and  that  also
 * therefore means  that it is reserved for developers  and  experienced
 * professionals having in-depth computer knowledge. Users are therefore
 * encouraged to load and test the software's suitability as regards their
 * requirements in conditions enabling the security of their systems and/or
 * data to be ensured and,  more generally, to use and operate it in the
 * same conditions as regards security.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL license and that you accept its terms.
 */
@GenModel(modelName="PiMM", prefix="PiMM", modelDirectory="/org.preesm.model.pisdf/ecore-gen", // redirection="",
	// classNamePattern="",
	// codeFormatting="true",
	// cleanup="true",
	importerID="org.eclipse.emf.importer.ecore", // !! if true a instrs.ecore is generated in .impl and is used by xxpackage.init() to
	// load the intrs packages (by default this false unless the generated XyzPackage might
	// exceed Java's byte code limit of 64k)
	loadInitialization="false", creationCommands="false", creationIcons="false", dataTypeConverters="false",
	operationReflection="false", complianceLevel="8.0")
@Ecore(nsURI="http://org.preesm/model/pisdf")
package org.preesm.model.pisdf

import java.io.File
import java.util.Collections
import java.util.Optional
import java.util.ArrayList
import org.preesm.commons.exceptions.PreesmRuntimeException
import org.preesm.commons.graph.Edge
import org.preesm.commons.graph.Graph
import org.preesm.commons.graph.Vertex
import org.preesm.model.pisdf.expression.ExpressionEvaluator
import org.preesm.model.pisdf.factory.PiMMUserFactory
import org.preesm.model.pisdf.util.RefinementResolver
import org.preesm.commons.logger.PreesmLogger

// !!! This is needed as of the current versions of xcore/xtext
// For some reason when using the default String/... (i.e. without the following)
// the corresponding EPackage attributes/... are resolved to type java.lang.Object
// instead of java.lang.String.
// This causes a problem for Tom mapping generation for instance.
// The following fixes this problem.
type String wraps String

type int wraps int

type long wraps long

type double wraps double

/*************************************
 *
 * PiSDF Specification
 *
 **************************************/
interface Parameterizable {
	op unique Parameter[] getInputParameters()
	op boolean isLocallyStatic() {
		// a Parameterizable is static if all its parameters are static (or it has no parameter)
		return inputParameters.filterNull.forall[isLocallyStatic]
	}
}

interface Expression {
	refers ExpressionHolder holder opposite expression
	op String getExpressionAsString()
	op long evaluate()
}

class StringExpression extends Expression {
	String expressionString = "0"
	op String getExpressionAsString() {
		return getExpressionString()
	}
	op long evaluate() {
		return ExpressionEvaluator.evaluate(this, Collections.emptyMap)
	}
}

class LongExpression extends Expression {
	long value = "0"
	op String getExpressionAsString() {
		return Long.toString(value)
	}
	op long evaluate() {
		return value
	}
}

interface ExpressionProxy extends Expression {
	refers ExpressionHolder proxy
	op String getExpressionAsString() {
		return proxy.getExpression().getExpressionAsString
	}
	op long evaluate() {
		proxy.getExpression().evaluate()
	}
}

interface ExpressionHolder extends Parameterizable {
	contains Expression expression opposite holder
	op void setExpression(String newExpression) {
		if (expression instanceof ExpressionProxy) {
			(expression as ExpressionProxy).proxy.setExpression(
				PiMMUserFactory.instance.createExpression(newExpression))
		} else {
			expression = PiMMUserFactory.instance.createExpression(newExpression)
		}
	}
	op void setExpression(long value) {
		if (expression instanceof ExpressionProxy) {
			(expression as ExpressionProxy).proxy.setExpression(PiMMUserFactory.instance.createExpression(value))
		} else {
			expression = PiMMUserFactory.instance.createExpression(value)
		}
	}
}

class DelayLinkedExpression extends ExpressionProxy {
}

interface AbstractVertex extends Vertex {
	String name
	op PiGraph getContainingPiGraph() {
		return containingGraph as PiGraph
	}
	op unique Port[] getAllPorts()
	op Port lookupPort(String portName) {
		return getAllPorts().filterNull.findFirst [
			(it.getName() === null) && (portName === null) || (it.getName() !== null) && it.getName().equals(portName)
		]
	}
	op String getVertexPath() {
		val actorName = name;
		return Optional.ofNullable(containingPiGraph).map[it|it.vertexPath + "/" + actorName].orElse(actorName)
	}
}

abstract class Configurable extends AbstractVertex, Parameterizable {
	contains ConfigInputPort[] configInputPorts opposite configurable
	op unique Parameter[] getInputParameters() {
		return configInputPorts.filterNull.map[incomingDependency].filterNull.map[setter].filter(Parameter).toEList.
			unmodifiableView
	}
	/*
	 * Lookup within all the ConfigInputPort and return the ones depending on the given
	 * Parameter, or null if this configurable is not connected to it.
	 */
	op ConfigInputPort[] lookupConfigInputPortsConnectedWithParameter(Parameter parameter) {
		return configInputPorts.filterNull.map[incomingDependency].filterNull.filter [
			it.setter === parameter
		].map[getter].toEList.unmodifiableView
	}
	op unique Port[] getAllConfigPorts() {
		return configInputPorts.unmodifiableView
	}
	op unique Port[] getAllPorts() {
		return allConfigPorts.unmodifiableView
	}
}

abstract class AbstractActor extends Configurable {
	contains DataInputPort[] dataInputPorts
	contains DataOutputPort[] dataOutputPorts
	contains ConfigOutputPort[] configOutputPorts
	op unique DataPort[] getAllDataPorts() {
		return (dataInputPorts + dataOutputPorts).toEList.unmodifiableView
	}
	op unique DataOutputPort[] getAllConnectedDataOutputPorts() {
		return (dataOutputPorts + configOutputPorts).filter[it.outgoingFifo !== null].toEList.unmodifiableView
	}
	
	op unique Port[] getAllConfigPorts() {
		return (super.allConfigPorts + configOutputPorts).toEList.unmodifiableView
	}
	op unique Port[] getAllPorts() {
		return (allConfigPorts + allDataPorts).toEList.unmodifiableView
	}
	/*
	 * @deprecated use getVertexPath() instead;
	 */
	op String getActorPath() {
		return vertexPath
	}
	op boolean isCluster() {
		return false
	}
}

class PiGraph extends AbstractActor, Graph, PeriodicElement {
	// URL to the file where this graph is saved
	String url
	boolean clusterValue = "false"

	// Indexes used for vertices and edges insertion/deletion in a way that matches the .pi
	/* Index used to know where to insert {@link Parameter} into the {@link PiGraph#vertices} */
	int parameterIndex = "0"

	/* Index used to know where to insert {@link AbstractActor} into the {@link PiGraph#vertices} */
	int actorIndex = "0"

	/* Index used to know where to insert {@link Delay} into the {@link PiGraph#vertices} */
	int delayIndex = "0"

	/* Index used to know where to insert {@link Fifo} with {@link Delay} into the {@link PiGraph#edges} */
	int fifoWithDelayIndex = "0"

	/* Index used to know where to insert {@link Fifo} without {@link Delay} into the {@link PiGraph#edges} */
	int fifoWithoutDelayIndex = "0"

	// Set of functions to update indexes. Theses functions are called by the observer.
	op void updateActorIndex() {
		actorIndex = vertices.filter(AbstractActor).filter(aa | !(aa instanceof DelayActor)).length
	}
	op void updateDelayIndex() {
		delayIndex = vertices.filter(Delay).length
	}
	op void updateParameterIndex() {
		parameterIndex = vertices.filter(Parameter).length
	}
	op void updateFifoWithDelayIndex() {
		fifoWithDelayIndex = edges.filter(Fifo).filter(f | f.getDelay() !== null).length
	}
	op void updateFifoWithoutDelayIndex() {
		fifoWithoutDelayIndex = edges.filter(Fifo).filter(f | f.getDelay() === null).length
	}


	op boolean isCluster() {
		return clusterValue
	}

	op String getPiGraphName() {
		var graphName = url.substring(url.lastIndexOf('/') + 1, url.length - 3);
		if (!graphName.isEmpty) {
			graphName = graphName.substring(0, 1).toUpperCase() + graphName.substring(1);
		}
		return graphName;
	} 
	op boolean isLocallyStatic() {
		// a PiGraph is static if all the parameters it contains are static
		// and if the input setters on its config interfaces are static
		// and if all its children graphs are locally static
		return super.isLocallyStatic && parameters.forall[isLocallyStatic] && childrenGraphs.forall[isLocallyStatic]
	}

	/*
	 * Add the {@link AbstractActor} at the end of the actor sublist before the first {@link Delay},<br>
	 * as the {@link org.preesm.model.pisdf.serialize.PiWriter <em>PiWriter</em>} reorder vertices in a<br>
	 * {@link Parameter} => {@link AbstractActor} => {@link Delay} => {@link DelayActor} order.
	 * <br>
	 * 
	 * @param actor
	 * 			The {@link AbstractActor} to be added to {@link PiGraph#vertices}
	 * 
	 * @return true is the {@link AbstractActor} was successfully added, false otherwise
	 */
	op unique boolean addActor(AbstractActor actor) {
		if (!(actor instanceof DelayActor)) {
			val int oldActorIndex = this.actorIndex
			try {
				vertices.add(parameterIndex + actorIndex, actor)
			} catch (IllegalArgumentException ignore) {
				return false
			}
			// Dirty fix for when the observer isn't triggered for whatever bs reason
			// Happens when actor is a PiGraph
			if (oldActorIndex == this.actorIndex) {
				PreesmLogger.getLogger().warning("The GraphObserver didn't catch actor " + actor.getName() + " insertion.")
				updateActorIndex()
			}
			return actor.equals(vertices.get(parameterIndex + actorIndex - 1))
		} else {
			return vertices.add(actor)
		}
	}

	/*
	 * Add the {@link Parameter} at the end of the {@link Parameter} sublist before the first {@link AbstractActor},<br>
	 * as the {@link org.preesm.model.pisdf.serialize.PiWriter <em>PiWriter</em>} reorder vertices in a<br>
	 * {@link Parameter} => {@link AbstractActor} => {@link Delay} => {@link DelayActor} order.
	 * <br>
	 * 
	 * @param actor
	 * 			The {@link Parameter} to be added to {@link PiGraph#vertices}
	 * 
	 * @return true is the {@link Parameter} was successfully added, false otherwise
	 */
	op unique boolean addParameter(Parameter parameter) {
		try {
			vertices.add(parameterIndex, parameter)
		} catch (IllegalArgumentException ignore) {
			return false
		}
		return true
	}

	/*
	 * Add the {@link Delay} at the end of the {@link Delay} sublist before the first {@link DelayActor},<br>
	 * as the {@link org.preesm.model.pisdf.serialize.PiWriter <em>PiWriter</em>} reorder vertices in a<br>
	 * {@link Parameter} => {@link AbstractActor} => {@link Delay} => {@link DelayActor} order.
	 * <br>
	 * 
	 * @param actor
	 * 			The {@link Delay} to be added to {@link PiGraph#vertices}
	 * 
	 * @return true is the {@link Delay} was successfully added, false otherwise
	 */
	op unique boolean addDelay(Delay delay) {
		var boolean additionStatus = false
		try {
			vertices.add(parameterIndex + actorIndex + delayIndex, delay)
		} catch (IllegalArgumentException ignore) {
			return false
		}
		additionStatus = delay.equals(vertices.get(parameterIndex + actorIndex + delayIndex - 1))
		return additionStatus && this.addActor(delay.getActor())
	}

	/*
	 * Add the {@link Fifo} at the end of the appropriate {@link Fifo} sublist before the first {@link Dependency},<br>
	 * as the {@link org.preesm.model.pisdf.serialize.PiWriter <em>PiWriter</em>} reorder edges in a<br>
	 * {@link Fifo} with {@link Delay} => {@link Fifo} without {@link Delay} => {@link Dependency} order.
	 * <br>
	 * 
	 * @param fifo
	 * 			The {@link Fifo} to be added to {@link PiGraph#edges}
	 * 
	 * @return true is the {@link Fifo} was successfully added, false otherwise
	 */
	op unique boolean addFifo(Fifo fifo) {
		var int index
		if (fifo.hasADelay === true) {
			index = fifoWithDelayIndex
		} else {
			index = fifoWithDelayIndex + fifoWithoutDelayIndex
		}
		try {
			edges.add(index, fifo)
		} catch (IllegalArgumentException ignore) {
			return false
		}
		return true
	}

	/*
	 * Add the {@link Dependency} at the end of the {@link PiGraph#edges} list,<br>
	 * as the {@link org.preesm.model.pisdf.serialize.PiWriter <em>PiWriter</em>} reorder edges in a<br>
	 * {@link Fifo} with {@link Delay} => {@link Fifo} without {@link Delay} => {@link Dependency} order.
	 * <br>
	 * 
	 * @param fifo
	 * 			The {@link Dependency} to be added to {@link PiGraph#edges}
	 * 
	 * @return true is the {@link Dependency} was successfully added, false otherwise
	 */
	op unique boolean addDependency(Dependency dependency) {
		edges.add(dependency)
	}

	op unique Parameter[] getParameters() {
		return vertices.filter(Parameter).toEList.unmodifiableView
	}
	op unique AbstractActor[] getActors() {
		return vertices.filter(AbstractActor).toEList.unmodifiableView
	}
	op unique AbstractActor[] getOnlyActors() {
		return (actors.filter(it|!(it instanceof PiGraph))).toEList.unmodifiableView
	}
	op unique Delay[] getDelays() {
		return vertices.filter(Delay).toEList.unmodifiableView
	}
	op unique AbstractActor[] getDelayActors() {
		return (actors.filter(it|(it instanceof DelayActor))).toEList.unmodifiableView
	}
	op unique Fifo[] getFifos() {
		return edges.filter(Fifo).toEList.unmodifiableView
	}
	op unique Dependency[] getDependencies() {
		return edges.filter(Dependency).toEList.unmodifiableView
	}

	/*
	 * Removes the {@link AbstractActor} from the {@link Pigraph#vertices} list,<br>
	 * <br>
	 * 
	 * @param actor
	 * 			The {@link AbstractActor} to be removed from {@link PiGraph#vertices}
	 * 
	 * @return true is the {@link AbstractActor} was successfully removed, false otherwise
	 */
	op unique boolean removeActor(AbstractActor actor) {
		val int oldActorIndex = this.actorIndex
		var boolean actorRemoved = false
		if (vertices.contains(actor)) {
			actorRemoved = vertices.remove(actor)
		}
		// Dirty fix for when the observer isn't triggered for whatever bs reason
		// Happens when actor is a PiGraph
		if (actorRemoved && (oldActorIndex == this.actorIndex) && !(actor instanceof DelayActor)) {
			PreesmLogger.getLogger().warning("The GraphObserver didn't catch actor " + actor.getName() + " removal.")
			updateActorIndex()
		}
		return actorRemoved
	}

	/*
	 * Removes the {@link Delay} and its associated {@link DelayActor} from the {@link Pigraph#vertices} list,<br>
	 * <br>
	 * 
	 * @param delay
	 * 			The {@link Delay} to be removed from {@link PiGraph#vertices}
	 * 
	 * @return true is the {@link Delay} its associated {@link DelayActor} were successfully removed, false otherwise
	 */
	op unique boolean removeDelay(Delay delay) {
		val boolean delayRemoved = vertices.remove(delay.getActor()) && vertices.remove(delay)
		return delayRemoved
	}

	/*
	 * Removes the {@link Fifo} from the {@link Pigraph#edges} list,<br>
	 * <br>
	 * 
	 * @param fifo
	 * 			The {@link Fifo} to be removed from {@link PiGraph#edges}
	 * 
	 * @return true is the {@link Fifo} was successfully removed, false otherwise
	 */
	op unique boolean removeFifo(Fifo fifo) {
		var boolean fifoRemoved = false
		if (edges.contains(fifo)) {
			fifoRemoved = edges.remove(fifo)
		}
		return fifoRemoved
	}

	/*
	 * Removes the {@link Parameter} from the {@link Pigraph#vertices} list,<br>
	 * <br>
	 * 
	 * @param param
	 * 			The {@link Parameter} to be removed from {@link PiGraph#vertices}
	 * 
	 * @return true is the {@link Parameter} was successfully removed, false otherwise
	 */
	op unique boolean removeParameter(Parameter param) {
		return vertices.remove(param)
	}

	/*
	 * Removes the {@link Dependency} from the {@link Pigraph#edges} list,<br>
	 * <br>
	 * 
	 * @param dep
	 * 			The {@link Dependency} to be removed from {@link PiGraph#edges}
	 * 
	 * @return true is the {@link Dependency} was successfully removed, false otherwise
	 */
	op unique boolean removeDependency(Dependency dep) {
		return edges.remove(dep)
	}
	
	op unique Parameter[] getOnlyParameters() {
		return parameters.filter(it|!((it instanceof ConfigInputInterface) || (it instanceof ConfigOutputInterface) )).
			toEList.unmodifiableView
	}
	op unique MoldableParameter[] getMoldableParameters() {
		return parameters.filter[it instanceof MoldableParameter].map[it as MoldableParameter].toEList.unmodifiableView
	}

	op unique Parameter[] getInputParameters() {
		val ownParams = new ArrayList<Parameter>(getOnlyParameters())
		ownParams.addAll(super.inputParameters)
		return ownParams.toEList.unmodifiableView
	}

	op unique String[] getActorsNames() {
		return actors.map[name].unmodifiableView
	}
	op unique String[] getParametersNames() {
		return parameters.map[name].unmodifiableView
	}
	op unique Actor[] getActorsWithRefinement() {
		return actors.filter(Actor).toEList.unmodifiableView
	}
	op unique Parameter[] getAllParameters() {
		return (parameters + childrenGraphs.map[allParameters].flatten).toEList.unmodifiableView
	}
	op unique PiGraph[] getChildrenGraphs() {
		return (actors.filter(PiGraph) + actorsWithRefinement.filter[isHierarchical].map[subGraph]).toEList.
			unmodifiableView
	}
	op unique PiGraph[] getAllChildrenGraphs() {
		return (allActors.filter(PiGraph) + actorsWithRefinement.filter[isHierarchical].map[subGraph]).toEList.
			unmodifiableView
	}
	op unique AbstractActor[] getAllActors() {
		return (actors + childrenGraphs.map[allActors].flatten).toEList.unmodifiableView
	}
	op unique Fifo[] getAllFifos() {
		return (fifos + childrenGraphs.map[allFifos].flatten).toEList.unmodifiableView
	}
	op unique Dependency[] getAllDependencies() {
		return (dependencies + childrenGraphs.map[allDependencies].flatten).toEList.unmodifiableView
	}
	op unique Delay[] getAllDelays() {
		return (delays + childrenGraphs.map[allDelays].flatten).toEList.unmodifiableView
	}
	op unique ConfigInputInterface[] getConfigInputInterfaces() {
		return parameters.filter(ConfigInputInterface).toEList.unmodifiableView
	}
	op unique DataInputInterface[] getDataInputInterfaces() {
		return actors.filter(DataInputInterface).toEList.unmodifiableView
	}
	op unique DataOutputInterface[] getDataOutputInterfaces() {
		return actors.filter(DataOutputInterface).toEList.unmodifiableView
	}
	op unique ConfigOutputInterface[] getConfigOutputInterfaces() {
		return actors.filter(ConfigOutputInterface).toEList.unmodifiableView
	}
	op Parameter lookupParameterGivenGraph(String parameterName , String graphName) {
		return allParameters.findFirst[it.name == parameterName && (it.containingPiGraph).name == graphName]
	}
	op AbstractVertex lookupVertex(String vertexName) {
		return (actors + parameters).findFirst[it.name == vertexName]
	}
	op AbstractVertex lookupAllVertex(String vertexName) {
		return (allActors + allParameters).findFirst[it.name == vertexName]
	}
	op Fifo lookupFifo(String fifoId) {
		return fifos.findFirst[it.id == fifoId]
	}

	op Fifo[] lookupFifos(AbstractActor source, AbstractActor target) {
		return fifos.filter[it.source == source && it.target == target].toEList
	}

	op Delay lookupDelay(String delayId) {
		return delays.findFirst[it.name == delayId]
	}
	op unique Fifo[] getFifosWithDelay() {
		return (fifos.filter[delay !== null]).toEList.unmodifiableView
	}
	op unique Fifo[] getFifosWithoutDelay() {
		return (fifos.filter[delay === null]).toEList.unmodifiableView
	}
}

abstract class ExecutableActor extends AbstractActor {
}

interface RefinementContainer {
	contains Refinement refinement opposite refinementContainer
}

class Actor extends ExecutableActor, RefinementContainer, PeriodicElement {
	long firingInstance
	String memoryScriptPath
	op boolean isConfigurationActor() {
		return configOutputPorts.map[outgoingDependencies].filter[!it.isEmpty].map[it.get(0)].map[getter].exists[true]
	}
	op boolean isHierarchical() {
		return refinement !== null && refinement.isHierarchical
	}
	op AbstractActor getChildAbstractActor() {
		if (refinement === null) {
			return null;
		} else {
			return refinement.abstractActor
		}
	}
	op PiGraph getSubGraph() {
		if (hierarchical) {
			return childAbstractActor as PiGraph
		} else {
			throw new UnsupportedOperationException("Cannot get the subgraph of a non hierarchical actor.")
		}
	}
}

interface PeriodicElement extends ExpressionHolder {
	op Expression getPeriod() {
		return expression;
	}
}

// Generic Special actors
abstract class SpecialActor extends ExecutableActor {
}

// special abstract class for special actors that the user can insert in the
// input PiSDF graph
abstract class UserSpecialActor extends SpecialActor {
}

class BroadcastActor extends UserSpecialActor {
}

class JoinActor extends UserSpecialActor {
}

class ForkActor extends UserSpecialActor {
}

class RoundBufferActor extends UserSpecialActor {
}


// special abstract class for special actors generated in the SRDAG
abstract class SrdagActor extends SpecialActor {
	op DataPort getDataPort() {
		// Data in/out interfaces have only one data port
		return allDataPorts.get(0)
	}

	// In case of init/end pair, returns the size of the Delay. Returns 0 otherwise
	op long getDelaySize()
	// In case of init/end pair, returns the persistence level of the Delay. Returns PersistanceLevel.NONE otherwise
	op PersistenceLevel getPersistenceLevel()
}

class InitActor extends SrdagActor, RefinementContainer {
	PersistenceLevel level
	refers AbstractActor endReference
	op DataOutputPort getDataOutputPort() {
		// Init actors only have one output port
		return dataOutputPorts.get(0)
	}
	op long getDelaySize() {
		return dataPort.portRateExpression.evaluate
	}
	op PersistenceLevel getPersistenceLevel() {
		return level
	}
}

class EndActor extends SrdagActor {
	refers AbstractActor initReference
	op DataInputPort getDataInputPort() {
		// End actors only have one input port
		return dataInputPorts.get(0)
	}
	op long getDelaySize() {
		if (initReference instanceof InitActor) {
			return (initReference as InitActor).getDelaySize()
		} else {
			return 0
		}
	}
	op PersistenceLevel getPersistenceLevel() {
		if (initReference instanceof InitActor) {
			return (initReference as InitActor).persistenceLevel
		} else {
			return PersistenceLevel.NONE
		}
	}
}

abstract class NonExecutableActor extends AbstractActor {
}

class DelayActor extends NonExecutableActor, RefinementContainer {
	refers Delay linkedDelay opposite actor
	// Return parameter of delays
	op Parameter[] getInputParameters() {
		return linkedDelay.inputParameters
	}
	// Delay actors have a unique input port and a unique output port
	op DataInputPort getDataInputPort() {
		if (dataInputPorts.empty) {
			return null
		}
		return dataInputPorts.get(0)
	}
	op DataOutputPort getDataOutputPort() {
		if (dataOutputPorts.empty) {
			return null
		}
		return dataOutputPorts.get(0)
	}
	// Return the actor that set / get the delay
	op AbstractActor getSetterActor() {
		return Optional.ofNullable(Optional.ofNullable(dataInputPort).map[incomingFifo].orElse(null)).map [
			sourcePort.containingActor
		].orElse(null)
	}
	op AbstractActor getGetterActor() {
		return Optional.ofNullable(Optional.ofNullable(dataOutputPort).map[outgoingFifo].orElse(null)).map [
			targetPort.containingActor
		].orElse(null)
	}
	op ConfigInputPort[] lookupConfigInputPortsConnectedWithParameter(Parameter p) {
		return linkedDelay.lookupConfigInputPortsConnectedWithParameter(p)
	}
	// Checks that the loop prototype matches the template
	// void delayInitRefinement(IN int size, OUT <type> *fifo);
	op boolean hasValidRefinement() {
		if (!(refinement instanceof CHeaderRefinement)) {
			return false
		}
		
		var FunctionPrototype proto = (refinement as CHeaderRefinement).getInitPrototype()
		if (proto.arguments.isEmpty) {
			return false
		}

		if (proto.arguments.filter[it.getDirection() === Direction.OUT && 
			!it.isIsConfigurationParameter].length != 1) {
			return false
		}

		if (proto.arguments.filter[it.getDirection() === Direction.IN && 
			!it.isIsConfigurationParameter].length > 0) {
			return false
		}

		if (proto.arguments.filter[it.getDirection() === Direction.OUT && 
			it.isIsConfigurationParameter].length > 0) {
			return false
		}

		return true
	}
}

interface Port {
	String name
	op PortKind getKind()
}

abstract class DataPort extends Port, ExpressionHolder {
	op Expression getPortRateExpression() {
		return getExpression
	}
	op AbstractActor getContainingActor() {
		if (eContainer() instanceof AbstractActor) {
			return eContainer() as AbstractActor;
		}
		return null;
	}
	PortMemoryAnnotation ^annotation
	op Parameter[] getInputParameters() {
		return containingActor.inputParameters.unmodifiableView
	}
	op String getId() {
		val String actorName = Optional.ofNullable(getContainingActor()).map[name].orElseThrow [
			new PreesmRuntimeException("Data port " + this + " is not contained in an AbstractActor.")
		];
		val String portName = Optional.ofNullable(name).filter[!it.isEmpty()].map["." + it].orElse("");
		return actorName + portName;
	}
	op Fifo getFifo()
}

class DataInputPort extends DataPort {
	refers Fifo incomingFifo opposite targetPort
	op PortKind getKind() {
		return PortKind.DATA_INPUT
	}
	op Fifo getFifo() {
		return incomingFifo;
	}
}

class DataOutputPort extends DataPort {
	refers Fifo outgoingFifo opposite sourcePort
	op PortKind getKind() {
		return PortKind.DATA_OUTPUT
	}
	op Fifo getFifo() {
		return outgoingFifo;
	}
}

class ConfigInputPort extends Port {
	refers Dependency incomingDependency opposite getter
	container Configurable configurable opposite configInputPorts
	op PortKind getKind() {
		return PortKind.CFG_INPUT
	}
}

class ConfigOutputPort extends DataOutputPort, ISetter {
	op boolean isLocallyStatic() {
		// config output ports are never considered static
		return false
	}
	op PortKind getKind() {
		return PortKind.CFG_OUTPUT
	}
}

class Fifo extends Edge {
	refers DataOutputPort sourcePort opposite outgoingFifo
	refers DataInputPort targetPort opposite incomingFifo
	refers Delay delay opposite containingFifo
	String ^type = "void"

	/* Flag used to mark if the current {@link Fifo} is supposed to be associated with a {@link Delay} */
	boolean hasADelay = "false"

	op Vertex getSource() {
		sourcePort.containingActor
	}
	op Vertex getTarget() {
		targetPort.containingActor
	}
	op PiGraph getContainingPiGraph() {
		return containingGraph as PiGraph
	}

	/*
	 * Assign the provided {@link Delay} to the current {@link Fifo}.<br>
	 * Check if the provided {@link Delay} already belongs to a {@link Fifo} which belongs to a {@link PiGraph},<br>
	 * and if so, re-assign the oldFifo as a {@link Fifo} without {@link Delay}.<br>
	 * <br>
	 * 
	 * Additionally, if the current {@link Fifo} belongs to a {@link PiGraph}, it is removed and re-added to ensure<br>
	 * it is correctly placed within the {@link PiGraph#edges} list.
	 * 
	 * @param newDelay
	 * 			The {@link Delay} to assign to the current {@link Fifo}.
	 */
	op void assignDelay(Delay newDelay) {
		if (newDelay === null) {
			setDelay(null)
			hasADelay = false
			return
		}

		val Fifo oldFifo = newDelay.getContainingFifo()
		var PiGraph oldGraph = null
		val Fifo newFifo = this
		var PiGraph newGraph = newFifo.getContainingPiGraph()
		// Removing the fifo that is currently holding the delay from its graph
		if (oldFifo !== null) {
			oldGraph = oldFifo.getContainingPiGraph()
			if(oldGraph !== null) {
				oldGraph.removeFifo(oldFifo)
			}
		}
		// Removing the fifo that will receive the delay from its graph
		if (newGraph !== null) {
			newGraph.removeFifo(this)
		}
		// Re-affecting the delay from oldFifo to newFifo
		this.setDelay(newDelay)
		hasADelay = true
		// Re-adding the fifo that was holding the delay to its graph
		if (newGraph !== null) {
			newGraph.addFifo(this)
		}
		// Re-adding the fifo that was holding the delay to its graph
		if (oldFifo !== null) {
			if(oldGraph !== null) {
				oldGraph.addFifo(oldFifo)
			}
		}
	}
	/*
	 * Return a {@link String} composed as follow:<br>
	 * "&ltSourceName&gt[.&ltSourcePortName&gt]-&ltTargetName&gt[.&ltTargetPortName&gt]" <br>
	 * <br>
	 * This ID should be unique since each {@link Port} can only have one {@link Fifo} connected to them. Moreover, a {@link Port} with no name is always the
	 * unique data {@link Port} of its owner.
	 */
	op String getId() {
		return Optional.ofNullable(sourcePort).map[id].orElseThrow [
			new PreesmRuntimeException("Fifo has no source port.")
		] + "-" + Optional.ofNullable(targetPort).map[id].orElseThrow [
			new PreesmRuntimeException("Fifo has no target port.")
		]
	}
}

interface InterfaceActor extends NonExecutableActor {
	refers DataPort graphPort
	op DataPort getDataPort() {
		// Data in/out interfaces have only one data port
		return allDataPorts.get(0)
	}
	op InterfaceKind getKind()

	// Properly rename the inner port during copy/pasting
	op void setName(String newName){
		super.name = newName

		if (!allDataPorts.empty) {
			getDataPort().name = newName
		}
	}
}

class DataInputInterface extends InterfaceActor {
	op InterfaceKind getKind() {
		return InterfaceKind.DATA_INPUT
	}
}

class DataOutputInterface extends InterfaceActor {
	op InterfaceKind getKind() {
		return InterfaceKind.DATA_OUTPUT
	}
}

class ConfigInputInterface extends Parameter {
	refers ConfigInputPort graphPort
	// A ConfigInputInterface gets its value from the parent graph once per execution.
	// During one iteration, its value does not change, thus it is locally static.
	op boolean isLocallyStatic() {
		return true
	}
	op boolean isConfigurable() {
		return false
	}
	op boolean isConfigurationInterface() {
		return true
	}
}

class ConfigOutputInterface extends InterfaceActor {
	op InterfaceKind getKind() {
		return InterfaceKind.CFG_OUTPUT
	}
}

interface Refinement {
	refers RefinementContainer refinementContainer opposite refinement
	String filePath
	op AbstractActor getAbstractActor() {
		return RefinementResolver.resolveAbstractActor(this)
	}
	op String getFileName() {
		return Optional.ofNullable(filePath).map[it|new File(it).getName()].orElse(null)
	}
	op boolean isHierarchical()
	boolean generated = "false"
}

class PiSDFRefinement extends Refinement {
	op boolean isHierarchical() {
		return (getFilePath() !== null) && !getFilePath().isEmpty()
	}
}

class CHeaderRefinement extends Refinement {
	contains FunctionPrototype loopPrototype
	contains FunctionPrototype initPrototype
	op boolean isHierarchical() {
		// C Header Refinement means it is obviously not a subgraph
		return false
	}
	
	op unique ConfigInputPort[] getLoopConfigInputPorts() {
		return this.loopPrototype.inputConfigParameters.filterNull.map[arg | Optional.ofNullable(this.eContainer as AbstractActor).map[lookupPort(arg.name) as ConfigInputPort].orElse(null)].toEList.unmodifiableView
	}
	
	op unique ConfigOutputPort[] getLoopConfigOutputPorts() {
		return this.loopPrototype.outputConfigParameters.filterNull.map[arg | Optional.ofNullable(this.eContainer as AbstractActor).map[lookupPort(arg.name) as ConfigOutputPort].orElse(null)].toEList.unmodifiableView
	}
	
	op unique ConfigInputPort[] getInitConfigInputPorts() {
		return this.initPrototype.inputConfigParameters.filterNull.map[arg | Optional.ofNullable(this.eContainer as AbstractActor).map[lookupPort(arg.name) as ConfigInputPort].orElse(null)].toEList.unmodifiableView
	}
	
}

class Parameter extends Vertex, Configurable, ISetter, ExpressionHolder {
	op Expression getValueExpression() {
		return getExpression
	}
	// a parameter is static if all its setters are static (or it has no setter)
	op boolean isLocallyStatic() {
		return getConfigInputPorts().map[incomingDependency].filterNull.map[setter].filterNull.forall[isLocallyStatic]
	}
	// a parameter is said 'configurable' if it has exactly one dependency, coming from a Configuration Actor.
	op boolean isConfigurable() {
		return !isLocallyStatic && isDependent && configInputPorts.size == 1 &&
			configInputPorts.get(0).incomingDependency.setter instanceof ConfigOutputPort;
	}
	// a parameter is dependent if it has at least one incoming dependency
	op boolean isDependent() {
		return !(configInputPorts.empty)
	}
	op boolean isConfigurationInterface() {
		return false
	}
	op unique Parameter[] getInputDependentParameters() {
		return getConfigInputPorts().map[incomingDependency].filterNull.map[setter].filter(Parameter).toEList.unmodifiableView
	}
	op unique Parameter[] getOutputDependentParameters() {
		return outgoingDependencies.filterNull.map[target].filter(Parameter).toEList.unmodifiableView
	}
}

class MoldableParameter extends Parameter {
	String userExpression
	op String[] getStrExpressions() {
		return userExpression.split(";").filter[!it.isEmpty()].toEList.unmodifiableView
	}
}

class Dependency extends Edge {
	refers ISetter setter opposite outgoingDependencies
	refers ConfigInputPort getter opposite incomingDependency
	op Vertex getSource() {
		if (setter instanceof Parameter) {
			return setter as Parameter;
		} else if (setter instanceof ConfigOutputPort) {
			return (setter as ConfigOutputPort).containingActor
		} else {
			return null
		}
	}
	op Vertex getTarget() {
		return getter.configurable
	}
	op PiGraph getContainingPiGraph() {
		return containingGraph as PiGraph
	}
}

interface ISetter {
	refers Dependency[] outgoingDependencies opposite setter
	op boolean isLocallyStatic()
}

class Delay extends Configurable, ExpressionHolder {
	op Expression getSizeExpression() {
		return getExpression
	}
	refers DelayActor actor opposite linkedDelay
	refers Fifo containingFifo opposite delay
	PersistenceLevel ^level = "permanent"
	op boolean hasSetterActor() {
		return Optional.ofNullable(actor).map[dataInputPort.incomingFifo !== null].orElse(false)
	}
	op boolean hasGetterActor() {
		return Optional.ofNullable(actor).map[dataOutputPort.outgoingFifo !== null].orElse(false)
	}
	op boolean isDynamic() {
		return hasSetterActor || hasGetterActor
	}
	op AbstractActor getGetterActor() {
		return actor.getterActor
	}
	op AbstractActor getSetterActor() {
		return actor.setterActor
	}
	op DataInputPort getGetterPort() {
		return Optional.ofNullable(actor.dataOutputPort.outgoingFifo.targetPort).orElse(null)
	}
	op DataOutputPort getSetterPort() {
		return Optional.ofNullable(actor.dataInputPort.incomingFifo.sourcePort).orElse(null)
	}
	op unique void setName(String newName) {
		if (newName !== null) {
			if (newName.empty) {
				var String srcName = Optional.ofNullable(containingFifo).map[sourcePort.containingActor.getName()].
					orElse("")
				var String tgtName = Optional.ofNullable(containingFifo).map[targetPort.containingActor.getName()].
					orElse("")
				super.setName("delay_" + srcName + "--" + tgtName)
			} else {
				super.setName(newName)
			}
			if (actor !== null) {
				actor.setName(name)
			}
		}
	}
	/*
	 * Return a {@link String} unique ID for Delay.
	 * This ID should be unique.
	 */
	op unique String getId() {
		var String srcName = Optional.ofNullable(containingFifo).map[sourcePort.containingActor.getName()].orElse("")
		var String srcPortName = Optional.ofNullable(containingFifo).map[sourcePort.name].orElse("")
		var String tgtName = Optional.ofNullable(containingFifo).map[targetPort.containingActor.getName()].orElse("")
		var String tgtPortName = Optional.ofNullable(containingFifo).map[targetPort.name].orElse("")
		return srcName + "_" + srcPortName + "__" + tgtName + "_" + tgtPortName
	}
}

class FunctionPrototype {
	String name
	boolean isCPPdefinition
	contains FunctionArgument[] arguments
	op unique FunctionArgument[] getInputConfigParameters() {
		return arguments.filter[it.isConfigurationParameter == true && it.direction == Direction.IN].toEList.unmodifiableView;
	}
	op unique FunctionArgument[] getOutputConfigParameters() {
		return arguments.filter[it.isConfigurationParameter == true && it.direction == Direction.OUT].toEList.unmodifiableView;
	}
	op unique FunctionArgument[] getInputArguments() {
		return arguments.filter[it.isConfigurationParameter == false && it.direction == Direction.IN].toEList.unmodifiableView;
	}
	op unique FunctionArgument[] getOutputArguments() {
		return arguments.filter[it.isConfigurationParameter == false && it.direction == Direction.OUT].toEList.unmodifiableView;
	}
	op boolean isCPP() {
		return isCPPdefinition || arguments.exists[isCPPdefinition]
	}
}

class FunctionArgument {
	String name
	String ^type
	Direction direction
	int position
	boolean isConfigurationParameter
	boolean isCPPdefinition	= "false"
	boolean isPassedByReference = "false"
}

enum Direction {
	IN = 0
	OUT = 1
}

enum PortMemoryAnnotation {
	NONE = 0
	READ_ONLY = 1
	WRITE_ONLY = 2
	UNUSED = 3
}

enum PersistenceLevel {
	NONE as "none" = 0
	PERMANENT as "permanent" = 1
	LOCAL as "local" = 2
}

enum PortKind {
	CFG_INPUT as "cfg_input" = 0
	DATA_INPUT as "input" = 1
	DATA_OUTPUT as "output" = 2
	CFG_OUTPUT as "cfg_output" = 3
}

enum InterfaceKind {
	DATA_INPUT as "src" = 0
	DATA_OUTPUT as "snk" = 1
	CFG_OUTPUT as "cfg_out_iface" = 2
	CFG_INPUT as "cfg_in_iface" = 3
}
