/**
 * Copyright or Â© or Copr. IETR/INSA - Rennes (2019) :
 *
 * Antoine Morvan [antoine.morvan@insa-rennes.fr] (2019)
 *
 * This software is a computer program whose purpose is to help prototyping
 * parallel applications using dataflow formalism.
 *
 * This software is governed by the CeCILL  license under French law and
 * abiding by the rules of distribution of free software.  You can  use,
 * modify and/ or redistribute the software under the terms of the CeCILL
 * license as circulated by CEA, CNRS and INRIA at the following URL
 * "http://www.cecill.info".
 *
 * As a counterpart to the access to the source code and  rights to copy,
 * modify and redistribute granted by the license, users are provided only
 * with a limited warranty  and the software's author,  the holder of the
 * economic rights,  and the successive licensors  have only  limited
 * liability.
 *
 * In this respect, the user's attention is drawn to the risks associated
 * with loading,  using,  modifying and/or developing or reproducing the
 * software by the user in light of its specific status of free software,
 * that may mean  that it is complicated to manipulate,  and  that  also
 * therefore means  that it is reserved for developers  and  experienced
 * professionals having in-depth computer knowledge. Users are therefore
 * encouraged to load and test the software's suitability as regards their
 * requirements in conditions enabling the security of their systems and/or
 * data to be ensured and,  more generally, to use and operate it in the
 * same conditions as regards security.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL license and that you accept its terms.
 */
@GenModel(modelName="Mapping", prefix="Mapping", modelDirectory="/org.preesm.algorithm/ecore-gen", // redirection="",
	// classNamePattern="",
	// codeFormatting="true",
	// cleanup="true",
	importerID="org.eclipse.emf.importer.ecore", // !! if true a instrs.ecore is generated in .impl and is used by xxpackage.init() to
	// load the intrs packages (by default this false unless the generated XyzPackage might
	// exceed Java's byte code limit of 64k)
	loadInitialization="false", creationCommands="false", creationIcons="false", dataTypeConverters="false",
	operationReflection="false", complianceLevel="8.0")
@Ecore(nsURI="http://org.preesm/algos/mapping")
package org.preesm.algorithm.mapping.model

import org.preesm.model.pisdf.AbstractActor
import org.preesm.model.slam.ComponentInstance

// !!! This is needed as of the current versions of xcore/xtext
// For some reason when using the default String/... (i.e. without the following)
// the corresponding EPackage attributes/... are resolved to type java.lang.Object
// instead of java.lang.String.
// This causes a problem for Tom mapping generation for instance.
// The following fixes this problem.
type String wraps String

type int wraps int

type long wraps long

type double wraps double

class Mapping {
	contains MultiMappingEntry[] mappings
	op ComponentInstance[] getMapping(AbstractActor actor) {
		return mappings.get(actor).unmodifiableView;
	}
	op ComponentInstance[] getAllInvolvedComponentInstances() {
		return mappings.values.flatten.toSet.toEList.unmodifiableView
	}
	op ComponentInstance getSimpleMapping(AbstractActor actor) {
		val ComponentInstance[] mappings = getMapping(actor)
		if (mappings.size != 1) {
        	throw new UnsupportedOperationException();
		}
		return mappings.get(0)
	}
}

class MultiMappingEntry wraps java.util.Map$Entry {
	refers AbstractActor key
	refers ComponentInstance[] value
}
class CoreMapping{
	int ID
	String coreType
	Double coreFrequency
	Double coreCommunicationRate
	
}

class NodeMapping{
	int ID
	String nodeName
	Double nodeCommunicationRate
	refers CoreMapping[] cores
	int nbCoreEquivalent
	
}
