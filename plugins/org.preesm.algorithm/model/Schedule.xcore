/**
 * Copyright or Â© or Copr. IETR/INSA - Rennes (2019) :
 *
 * Antoine Morvan [antoine.morvan@insa-rennes.fr] (2019)
 * Dylan Gageot [gageot.dylan@gmail.com] (2019)
 *
 * This software is a computer program whose purpose is to help prototyping
 * parallel applications using dataflow formalism.
 *
 * This software is governed by the CeCILL  license under French law and
 * abiding by the rules of distribution of free software.  You can  use,
 * modify and/ or redistribute the software under the terms of the CeCILL
 * license as circulated by CEA, CNRS and INRIA at the following URL
 * "http://www.cecill.info".
 *
 * As a counterpart to the access to the source code and  rights to copy,
 * modify and redistribute granted by the license, users are provided only
 * with a limited warranty  and the software's author,  the holder of the
 * economic rights,  and the successive licensors  have only  limited
 * liability.
 *
 * In this respect, the user's attention is drawn to the risks associated
 * with loading,  using,  modifying and/or developing or reproducing the
 * software by the user in light of its specific status of free software,
 * that may mean  that it is complicated to manipulate,  and  that  also
 * therefore means  that it is reserved for developers  and  experienced
 * professionals having in-depth computer knowledge. Users are therefore
 * encouraged to load and test the software's suitability as regards their
 * requirements in conditions enabling the security of their systems and/or
 * data to be ensured and,  more generally, to use and operate it in the
 * same conditions as regards security.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL license and that you accept its terms.
 */
@GenModel(modelName="Schedule", prefix="Schedule", modelDirectory="/org.preesm.algorithm/ecore-gen", // redirection="",
	// classNamePattern="",
	// codeFormatting="true",
	// cleanup="true",
	importerID="org.eclipse.emf.importer.ecore", // !! if true a instrs.ecore is generated in .impl and is used by xxpackage.init() to
	// load the intrs packages (by default this false unless the generated XyzPackage might
	// exceed Java's byte code limit of 64k)
	loadInitialization="false", creationCommands="false", creationIcons="false", dataTypeConverters="false",
	operationReflection="false", complianceLevel="8.0")
@Ecore(nsURI="http://org.preesm/algos/schedule")
package org.preesm.algorithm.schedule.model

import org.preesm.algorithm.synthesis.schedule.SchedulePrinterSwitch
import org.preesm.model.pisdf.AbstractActor
import org.preesm.model.pisdf.Fifo
import org.preesm.model.pisdf.SpecialActor
import org.preesm.model.slam.ComponentInstance
import org.eclipse.emf.common.util.ECollections
import org.preesm.model.slam.SlamRouteStep

// !!! This is needed as of the current versions of xcore/xtext
// For some reason when using the default String/... (i.e. without the following)
// the corresponding EPackage attributes/... are resolved to type java.lang.Object
// instead of java.lang.String.
// This causes a problem for Tom mapping generation for instance.
// The following fixes this problem.
type String wraps String

type int wraps int

type long wraps long

type double wraps double

/*
 * Represent a schedule, that is an order of execution. Its hierarchy make possible
 * the association with several level of hierarchy in the architecture model.
 *
 * TODO - See https://preesm.org/todo for more examples.
 */
interface Schedule {
	/*
	 * TODO - Semantic to be refined
	 *
	 * Used when building schedules for non-srdag PiGraphs.
	 */
	long repetition
	contains volatile Schedule[] children
	refers HierarchicalSchedule parent opposite scheduleTree

	op Schedule getRoot() {
		if (parent === null)
			return this
		else
			return parent.root
	}
	/*
	 * Returns the number of extra top iterations this schedule can cross. It is used to
	 * represent software pipelined schedules (see {@link StagedSchedule}) or to pipeline
	 * the execution of actors (see {@link StagedActorSchedule}).
	 *
	 * Default value is the sum of its children.
	 */
	op int getSpan() {
		if (children.empty)
			return 0
		else
			return children.stream.mapToInt(it|it.span).sum
	}
	/*
	 * Returns whether the direct children of this schedule can be executed simultaneously.
	 */
	op boolean isParallel()
	/*
	 * Return true if the schedule is linked with an actor. This is the case when applying clustering, where
	 * the attached actor of a HierarchicalSchedule is the clustered subraph.
	 */
	op boolean hasAttachedActor() {
		return false
	}
	/*
	 * returns a String representing the schedule informally.
	 */
	op String shortPrint() {
		return SchedulePrinterSwitch.print(this)
	}
}

class ScapeSchedule{
		int repetition
		refers AbstractActor actor
		boolean beginLoop
		boolean endLoop
		boolean LoopPrec
		int endLoopNb
		refers ComponentInstance cmp	
}

class ScapeBuilder{
	String initFunc
	String[] subInit
	String loopFunc
	String body
	String[] buffer
	String[] dynmicBuffer
}

/*
 * Denotes a schedule whose children can be executed simultaneously.
 *
 * The span of parallel schedule is the max of its children
 */
interface ParallelSchedule extends Schedule {
	op boolean isParallel() {
		return true;
	}
	op int getSpan() {
		if (children.empty)
			return 0
		else
			return children.map[span].max
	}
}

/*
 * Denotes a schedule whose children can NOT be executed simultaneously.
 */
interface SequentialSchedule extends Schedule {
	// all elements of this list should be executed sequentially
	op boolean isParallel() {
		return false;
	}
}

/*
 * Abstraction to represent a Schedule with other schedules as children.
 * There is no hypothesis on the order on the execution of its children.
 */
interface HierarchicalSchedule extends Schedule {
	/*
	 * This reference may be used when scheduling non flatten/srdag graph.
	 * For instance, when clustering, it can refer the corresponding subgraph.
	 */
	refers AbstractActor attachedActor
	op boolean hasAttachedActor() {
		return attachedActor !== null
	}
	contains Schedule[] scheduleTree opposite parent
	op Schedule[] getChildren() {
		return scheduleTree
	}
}

/*
 * Abstraction to represent a Schedule with a list of actor(s) to execute, and no children.
 * There is no hypothesis on the order on the execution of its children.
 */
interface ActorSchedule extends Schedule {
	/* list of actors to execute in this schedule.
	 * The list may be ordered if {@link #isParallel} returns true.
	 */
	refers AbstractActor[] actorList

	// Actor schedules have no children
	op Schedule[] getChildren() {
		return ECollections.emptyEList
	}
}

/*
 * This schedule contains an ordered list of actors whose execution is
 * sequential, in the order of apparition in the list.
 *
 * This schedule as no children.
 */
class SequentialActorSchedule extends ActorSchedule, SequentialSchedule {
}

/*
 * This schedule contains an ordered list of schedule children whose execution is
 * sequential, in the order of apparition in the list.
 */
class SequentialHiearchicalSchedule extends HierarchicalSchedule, SequentialSchedule {
}

/*
 * This schedule contains a list of schedule children whose execution can be
 * simultaneous (i.e. parallel).
 */
class ParallelHiearchicalSchedule extends HierarchicalSchedule, ParallelSchedule {
}

/*
 * This schedule contains an ordered list of actors whose execution is
 * sequential, in the order of apparition in the list.
 *
 * The span value indicates how many iteration of its parent it can cross until
 * its execution is considered terminated. This is a "logical timing" as the real
 * time of execution will be affected by synchronized communications of the SDF
 * execution model.
 *
 * This schedule as no children.
 */
class StagedActorSchedule extends SequentialActorSchedule {
	int spanValue
	op int getSpan() {
		return spanValue
	}
}

/*
 * This schedule contains an ordered list of schedule children whose execution is
 * sequential, in the order of apparition in the list.
 *
 * The span value is equals to the number of children, and indicates how many
 * iteration of its parent it can cross until its execution is considered terminated.
 * This is a "logical timing" as the real time of execution will be affected by
 * synchronized communications of the SDF execution model.
 */
class StagedHiearchicalSchedule extends SequentialHiearchicalSchedule {
	op int getSpan() {
		return children.stream.mapToInt(it|Math.max(it.span, 1)).sum
	}
}



// Special actors to fire communication. They are used to schedule the Fifos
abstract class CommunicationActor extends SpecialActor {
	refers Fifo fifo
	refers SlamRouteStep routeStep
}

abstract class SendActor extends CommunicationActor {
	op ComponentInstance getSendEnabler()
}
class SendStartActor extends SendActor {
	// to track when com ends
	refers SendEndActor sendEnd opposite sendStart

	// to track to who data is sent
	refers ReceiveEndActor targetReceiveEnd opposite sourceSendStart

	// optional enable to delegate the copy to (DMA, ...)
	refers ComponentInstance sendEnabler
}
class SendEndActor extends SendActor {
	// to track when com started
	refers SendStartActor sendStart opposite sendEnd

	// start & end have same enabler
	op ComponentInstance getSendEnabler() {
		return sendStart.sendEnabler
	}
}

abstract class ReceiveActor extends CommunicationActor {
	op ComponentInstance getReceiveEnabler()
}
class ReceiveStartActor extends ReceiveActor {
	// to track when com ends
	refers ReceiveEndActor receiveEnd opposite receiveStart

	// optional enable to delegate the copy to (DMA, ...)
	refers ComponentInstance receiveEnabler
}
class ReceiveEndActor extends ReceiveActor {
	// to track who sent
	refers SendStartActor sourceSendStart opposite targetReceiveEnd

	// to track when com started
	refers ReceiveStartActor receiveStart opposite receiveEnd

	// start & end have same enabler
	op ComponentInstance getReceiveEnabler() {
		return receiveStart.receiveEnabler
	}
}

// Receive then Send. Atomic: simplifies allocation.
//class ForwardActor extends SendEndActor, SendStartActor, ReceiveStartActor, ReceiveEndActor {
//}

