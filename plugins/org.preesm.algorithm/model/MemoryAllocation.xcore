/**
 * Copyright or Â© or Copr. IETR/INSA - Rennes (2019 - 2021) :
 *
 * Antoine Morvan [antoine.morvan@insa-rennes.fr] (2019)
 * Hugo Miomandre [hugo.miomandre@insa-rennes.fr] (2021)
 *
 * This software is a computer program whose purpose is to help prototyping
 * parallel applications using dataflow formalism.
 *
 * This software is governed by the CeCILL  license under French law and
 * abiding by the rules of distribution of free software.  You can  use,
 * modify and/ or redistribute the software under the terms of the CeCILL
 * license as circulated by CEA, CNRS and INRIA at the following URL
 * "http://www.cecill.info".
 *
 * As a counterpart to the access to the source code and  rights to copy,
 * modify and redistribute granted by the license, users are provided only
 * with a limited warranty  and the software's author,  the holder of the
 * economic rights,  and the successive licensors  have only  limited
 * liability.
 *
 * In this respect, the user's attention is drawn to the risks associated
 * with loading,  using,  modifying and/or developing or reproducing the
 * software by the user in light of its specific status of free software,
 * that may mean  that it is complicated to manipulate,  and  that  also
 * therefore means  that it is reserved for developers  and  experienced
 * professionals having in-depth computer knowledge. Users are therefore
 * encouraged to load and test the software's suitability as regards their
 * requirements in conditions enabling the security of their systems and/or
 * data to be ensured and,  more generally, to use and operate it in the
 * same conditions as regards security.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL license and that you accept its terms.
 */
@GenModel(modelName="MemoryAllocation", prefix="MemoryAllocation", modelDirectory="/org.preesm.algorithm/ecore-gen", // redirection="",
	// classNamePattern="",
	// codeFormatting="true",
	// cleanup="true",
	importerID="org.eclipse.emf.importer.ecore", // !! if true a instrs.ecore is generated in .impl and is used by xxpackage.init() to
	// load the intrs packages (by default this false unless the generated XyzPackage might
	// exceed Java's byte code limit of 64k)
	loadInitialization="false", creationCommands="false", creationIcons="false", dataTypeConverters="false",
	operationReflection="false", complianceLevel="8.0")
@Ecore(nsURI="http://org.preesm/algos/memalloc")
package org.preesm.algorithm.memalloc.model

import org.preesm.model.pisdf.Fifo
import org.preesm.model.pisdf.InitActor
import org.preesm.model.slam.ComponentInstance

// !!! This is needed as of the current versions of xcore/xtext
// For some reason when using the default String/... (i.e. without the following)
// the corresponding EPackage attributes/... are resolved to type java.lang.Object
// instead of java.lang.String.
// This causes a problem for Tom mapping generation for instance.
// The following fixes this problem.
type String wraps String

type int wraps int

type long wraps long

type double wraps double


interface Buffer {
	long sizeInBit // size in bit
	contains LogicalBuffer[] children opposite containingBuffer
	op PhysicalBuffer getBank()
	op Allocation getAllocation() {
		return bank.allocation
	}
	op boolean isEqualsOrRecursivelyContains(Buffer other) {
		return this == other || children.exists[it.isEqualsOrRecursivelyContains(other)]
	}
	
	op long getSizeInByte() {
		return (getSizeInBit + 7L) / 8L;
	}
}

class PhysicalBuffer extends Buffer {
	refers Allocation allocation opposite physicalBuffers
	refers ComponentInstance memoryBank
	op PhysicalBuffer getBank() {
		return this
	}
}

class LogicalBuffer extends Buffer {
	long offsetInBit // absolute offset in bits wrt parent address 0
	refers Buffer containingBuffer opposite children
	op PhysicalBuffer getBank() {
		return containingBuffer.getBank()
	}
}

class NullBuffer extends LogicalBuffer {
}


class FifoAllocationEntry wraps java.util.Map$Entry {
	refers Fifo key
	refers FifoAllocation value
}

class FifoAllocation {
	refers Fifo fifo

	// must verify that the fifo source actor is mapped to an operator
	// with a link to memory bank storing the sourceBuffer
	refers Buffer sourceBuffer

	// must verify that the fifo target actor is mapped to an operator
	// with a link to memory bank storing the targetBuffer
	refers Buffer targetBuffer

	// Can be empty if the route does not use any proxy operator, i.e. when
	// source and target buffers are on the same memory bank;
	contains Buffer[] routeBuffers

	op Buffer[] getAllBuffers() {
		return (#[sourceBuffer] + routeBuffers + #[targetBuffer]).toEList
	}
}

class DelayAllocationEntry wraps java.util.Map$Entry {
	refers InitActor key
	refers Buffer value
}

class Allocation {
	// memory banks used by this allocation
	contains PhysicalBuffer[] physicalBuffers opposite allocation
	// buffers allocated for the fifos
	contains FifoAllocationEntry[] fifoAllocations
	// Buffers allocated for the permanent and local delays. The values are pushed by the
	// EndActor and poped by the InitActor. To get the buffer for an EndActor, get its
	// init reference allocated buffer.
	contains DelayAllocationEntry[] delayAllocations

	// Query method that returns the Fifos mapped to this buffer
	// and this buffer children (recursively)
	op Fifo[] getFifoAllocationEntry(Buffer b) {
		return fifoAllocations.filter[it.value.allBuffers.exists[b.isEqualsOrRecursivelyContains(it)]].map[it.key].toEList.unmodifiableEList
	}

	// Query method that return the Delays (in form of their InitActors) mapped to this buffer
	// and this buffer children (recursively)
	op InitActor[] getDelayAllocationEntry(Buffer b) {
		return delayAllocations.filter[b.isEqualsOrRecursivelyContains(it.value)].map[it.key].toEList.unmodifiableEList
	}
}

