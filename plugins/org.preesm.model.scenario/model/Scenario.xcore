/**
 * Copyright or © or Copr. IETR/INSA - Rennes (2019-2020) :
 *
 * Alexandre Honorat [alexandre.honorat@insa-rennes.fr] (2019)
 * Antoine Morvan [antoine.morvan@insa-rennes.fr] (2019)
 * Daniel Madroñal [daniel.madronal@upm.es] (2019)
 * Julien Heulot [julien.heulot@insa-rennes.fr] (2020)
 * Mickael Dardaillon [mickael.dardaillon@insa-rennes.fr] (2020)
 *
 * This software is a computer program whose purpose is to help prototyping
 * parallel applications using dataflow formalism.
 *
 * This software is governed by the CeCILL  license under French law and
 * abiding by the rules of distribution of free software.  You can  use,
 * modify and/ or redistribute the software under the terms of the CeCILL
 * license as circulated by CEA, CNRS and INRIA at the following URL
 * "http://www.cecill.info".
 *
 * As a counterpart to the access to the source code and  rights to copy,
 * modify and redistribute granted by the license, users are provided only
 * with a limited warranty  and the software's author,  the holder of the
 * economic rights,  and the successive licensors  have only  limited
 * liability.
 *
 * In this respect, the user's attention is drawn to the risks associated
 * with loading,  using,  modifying and/or developing or reproducing the
 * software by the user in light of its specific status of free software,
 * that may mean  that it is complicated to manipulate,  and  that  also
 * therefore means  that it is reserved for developers  and  experienced
 * professionals having in-depth computer knowledge. Users are therefore
 * encouraged to load and test the software's suitability as regards their
 * requirements in conditions enabling the security of their systems and/or
 * data to be ensured and,  more generally, to use and operate it in the
 * same conditions as regards security.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL license and that you accept its terms.
 */
@GenModel(modelName="Scenario", prefix="Scenario", modelDirectory="/org.preesm.model.scenario/ecore-gen", // redirection="",
	// classNamePattern="",
	// codeFormatting="true",
	// cleanup="true",
	importerID="org.eclipse.emf.importer.ecore", // !! if true a instrs.ecore is generated in .impl and is used by xxpackage.init() to
	// load the intrs packages (by default this false unless the generated XyzPackage might
	// exceed Java's byte code limit of 64k)
	loadInitialization="false", creationCommands="false", creationIcons="false", dataTypeConverters="false",
	operationReflection="false", complianceLevel="8.0")
@Ecore(nsURI="http://org.preesm/model/scenario")
package org.preesm.model.scenario

import java.util.Objects
import org.eclipse.core.runtime.IPath
import org.eclipse.core.runtime.Path
import org.eclipse.emf.common.util.ECollections
import org.eclipse.emf.common.util.EMap
import org.preesm.commons.model.PreesmCopyTracker
import org.preesm.model.pisdf.AbstractActor
import org.preesm.model.pisdf.Parameter
import org.preesm.model.pisdf.PiGraph
import org.preesm.model.pisdf.SpecialActor
import org.preesm.model.pisdf.expression.ExpressionEvaluator
import org.preesm.model.pisdf.serialize.PiParser
import org.preesm.model.scenario.util.DefaultTypeSizes
import org.preesm.model.slam.ComponentInstance
import org.preesm.model.slam.Design
import org.preesm.model.slam.serialize.SlamParser
import org.preesm.model.slam.Component
import org.preesm.model.slam.TimingType

// !!! This is needed as of the current versions of xcore/xtext
// For some reason when using the default String/... (i.e. without the following)
// the corresponding EPackage attributes/... are resolved to type java.lang.Object
// instead of java.lang.String.
// This causes a problem for Tom mapping generation for instance.
// The following fixes this problem.
type String wraps String

type int wraps int

type long wraps long

type double wraps double

enum ScenarioConstants {
	DEFAULT_TIMING_TASK = 100
	DEFAULT_TIMING_SPECIAL_TASK = 10
	DEFAULT_MISSING_TIMING = -1
	DEFAULT_MEMCOPY_SETUP_TIME = 1
	DEFAULT_MEMCOPY_UNIT_PER_TIME = 1000
	DEFAULT_AVG_DATA_TRANSFER_SIZE = 1000
	DEFAULT_DATA_TYPE_SIZE = 8
	DEFAULT_MISSING_DATA_TYPE = -1
	DEFAULT_POWER_PE = 10
	DEFAULT_ENERGY_TASK = 1
	DEFAULT_ENERGY_COMM = 1
}

class Scenario {
	String scenarioURL
	String codegenDirectory
	refers PiGraph algorithm
	refers Design  design
	contains Constraints constraints opposite scenario
	contains Timings timings opposite scenario
	contains SimulationInfo simulationInfo opposite scenario
	contains ParameterValueOverride[] parameterValues opposite scenario
	contains PapifyConfig papifyConfig opposite scenario
	contains EnergyConfig energyConfig opposite scenario
	Boolean sizesAreInBit = "false"
	op String getScenarioName() {
		val IPath algoPath = new Path(algorithm.url).removeFileExtension();
		val String algoName = algoPath.lastSegment();
		val IPath archiPath = new Path(design.url).removeFileExtension();
		val String archiName = archiPath.lastSegment();
		return algoName + "_" + archiName;
	}
	op boolean isProperlySet() {
		val boolean hasProperAlgo = algorithm !== null;
		val boolean hasProperArchi = design !== null;
		return hasProperAlgo && hasProperArchi;
	}
	op void update(String algoPath, String archiPath) {
		// If the architecture changes, operator ids, operator defintion ids and
		// com node ids are no more valid (they are extracted from the
		// architecture)
		if (archiPath !== null) {

			// Extract the root object from the resource.
			this.design = SlamParser.parseSlamDesign(archiPath);
		}
		// If the algorithm changes, parameters or variables are no more valid
		// (they are set in the algorithm)
		if (algoPath !== null) {
			val PiGraph newPiGraph = PiParser.getPiGraphWithReconnection(algoPath);
			this.algorithm = newPiGraph;
			getParameterValues().clear();
			for (Parameter p : newPiGraph.getAllParameters()) {
				if (!p.isConfigurationInterface()) {
					parameterValues.put(p, p.getExpression().getExpressionAsString());
				}
			}
		}
		// If the algorithm or the architecture changes, timings and constraints
		// are no more valid (they depends on both algo and archi)
		if (algoPath !== null || archiPath !== null) {
			timings.actorTimings.clear()
			constraints.groupConstraints.clear()
			papifyConfig.papifyConfigGroupsActors.clear
			papifyConfig.papifyConfigGroupsPEs.clear
		}
	}
	op ComponentInstance[] getPossibleMappings(AbstractActor actor) {
		var ComponentInstance[] mapping
		if (actor instanceof SpecialActor) {
			mapping = simulationInfo.specialVertexOperators
		} else {
			mapping = constraints.groupConstraints.filter[ECollections.indexOf(it.value, actor, 0) != -1].map[it.key]
		}
		if (mapping.isEmpty) {
			val source = PreesmCopyTracker.getSource(actor)
			if (source != actor) {
				mapping = getPossibleMappings(source)
			} else {
				mapping = ECollections.newBasicEList
			}
		}
		return mapping.unmodifiableEList
	}
}

/* #####################
 *  		Simulation
 ##################### */
class SimulationInfo {
	refers Scenario scenario opposite simulationInfo
	refers ComponentInstance mainComNode
	refers ComponentInstance mainOperator
	refers ComponentInstance[] specialVertexOperators
	long averageDataSize = "1000"
	op void addSpecialVertexOperator(ComponentInstance component) {
		if (!specialVertexOperators.contains(component)) {
			this.specialVertexOperators.add(component);
		}
	}
	contains DataType[] dataTypes opposite simulationInfo
	op long getDataTypeSizeOrDefault(String typeName) {
		if (dataTypes.containsKey(typeName)) {
			return dataTypes.get(typeName);
		} else {
			return ScenarioConstants.DEFAULT_DATA_TYPE_SIZE.value;
		}
	}
	op long getDataTypeSizeInByte(String typeName) {
		return getBufferSizeInByte(typeName, 1)
	}
	op long getDataTypeSizeInBit(String typeName) {
		return getBufferSizeInBit(typeName, 1)
	}
	op long getBufferSizeInByte(String typeName, long nbToken) {
		if (dataTypes.containsKey(typeName)) {
			return (dataTypes.get(typeName) * nbToken + 7L) / 8L;
		} else if (DefaultTypeSizes.getInstance().getTypeSize(typeName) !== DefaultTypeSizes.UNKNOWN_TYPE) {
			return (DefaultTypeSizes.getInstance().getTypeSize(typeName) * nbToken + 7L) / 8L;
		} else {
			return ScenarioConstants.DEFAULT_MISSING_DATA_TYPE.value;
		}
	}
	op long getBufferSizeInBit(String typeName, long nbToken) {
		if (dataTypes.containsKey(typeName)) {
			return dataTypes.get(typeName) * nbToken;
		} else if (DefaultTypeSizes.getInstance().getTypeSize(typeName) !== DefaultTypeSizes.UNKNOWN_TYPE) {
			return DefaultTypeSizes.getInstance().getTypeSize(typeName) * nbToken;
		} else {
			return ScenarioConstants.DEFAULT_MISSING_DATA_TYPE.value;
		}
	}
}

class DataType wraps java.util.Map$Entry {
	refers SimulationInfo simulationInfo opposite dataTypes
	String key // the type name (i.e. short, float, etc.)
	Long value // the type size (i.e. 2, 4, etc.)
}

/* #####################
 *  		Constraints
 ##################### */
class Constraints {
	refers Scenario scenario opposite constraints
	// constraint group
	String groupConstraintsFileURL
	contains GroupConstraint[] groupConstraints opposite constraints
	op void addConstraint(ComponentInstance cmpInstance, AbstractActor actor) {
		if (!groupConstraints.containsKey(cmpInstance)) {
			groupConstraints.put(cmpInstance, ECollections.newBasicEList);
		}
		groupConstraints.get(cmpInstance).add(actor);
	}
	op void addConstraints(ComponentInstance cmpInstance, AbstractActor[] actors) {
		if (!groupConstraints.containsKey(cmpInstance)) {
			groupConstraints.put(cmpInstance, ECollections.newBasicEList);
		}
		groupConstraints.get(cmpInstance).addAll(actors);
	}
	op int nbConstrainsWithComp(String compType) {
		return groupConstraints.filter[e | e.key.component.vlnv.name.equals(compType)].size;
	}
	op boolean isCoreContained(String peName) {
		return !groupConstraints.filter[e | e.key.instanceName.equals(peName)].empty;
	}
}

/*
 * A group constraint specifies which actors (the value) can be executed
 * on a given processing element (the key)
 */
class GroupConstraint wraps java.util.Map$Entry {
	refers Constraints constraints opposite groupConstraints
	refers ComponentInstance key // the operator
	refers AbstractActor[] value // the vertices allowed on that operator
}

/* #####################
 *  		Parameters
 ##################### */
class ParameterValueOverride wraps java.util.Map$Entry {
	refers Scenario scenario opposite parameterValues
	refers Parameter key
	String value // expression
// all other values can be derived from the Parameter key
}

/* #####################
 *  		 Timings
 ##################### */
class Timings {
	String excelFileURL // excel or csv local file
	refers Scenario scenario opposite timings
	contains ActorTimings[] actorTimings opposite timings

	op void setExecutionTime(AbstractActor actor, Component component, long time) {
		setExecutionTime(actor, component, Long.toString(time))
	}
	op void setExecutionTime(AbstractActor actor, Component component, String value) {
		setTiming(actor, component, TimingType.EXECUTION_TIME, value)
	}
	op void setTiming(AbstractActor actor, Component component, TimingType timingType, String value) {
		if (!actorTimings.containsKey(actor)) {
			actorTimings.put(actor, ECollections.asEMap(newLinkedHashMap))
		}
		if (!actorTimings.get(actor).containsKey(component)) {
			actorTimings.get(actor).put(component, ECollections.asEMap(newLinkedHashMap))
		}
		actorTimings.get(actor).get(component).put(timingType, value)
	}
	op String getExecutionTimeOrDefault(AbstractActor actor, Component component) {
		return getTimingOrDefault(actor, component, TimingType.EXECUTION_TIME)
	}

	op String getTimingOrDefault(AbstractActor actor, Component component, TimingType timingType) {
		val String timing = getTiming(actor, component, timingType);
		if (timing.isEmpty()) {
			return Long.toString(ScenarioConstants.DEFAULT_TIMING_TASK.value);
		}
		return timing;
	}

	// CAN return an empty string
	op String getTiming(AbstractActor actor, Component component, TimingType timingType) {
		val timing = this.actorTimings.get(actor)?.get(component)?.get(timingType)
		if ((timing !== null) && (!timing.isEmpty())) {
			return timing
		}
		val AbstractActor source = PreesmCopyTracker.getSource(actor);
		if (source !== actor) {
			return getTiming(source, component, timingType);
		}
		return "";
	}

	op long evaluateExecutionTimeOrDefault(AbstractActor actor, Component component) {
		return evaluateTimingOrDefault(actor, component, TimingType.EXECUTION_TIME)
	}

	/*
	 * Evaluate timing expression.
	 * <br>
	 *
	 * @param actor
	 * 			The {@link AbstractActor} from which the timing value is requested
	 *
	 * @param component
	 * 			The {@link Component}
	 *
	 * @param timingType
	 * 			The {@link TimingType}
	 *
	 * @return the timing value if the expression is valid, ScenarioConstants.DEFAULT_TIMING_TASK otherwise.
	 */
	op long evaluateTimingOrDefault(AbstractActor actor, Component component, TimingType timingType) {
		val long timingValue = evaluateTiming(actor, component, timingType);
		if (timingValue !== ScenarioConstants.DEFAULT_MISSING_TIMING.value) {
			return timingValue;
		}
		return ScenarioConstants.DEFAULT_TIMING_TASK.value;
	}

	/*
	 * Evaluate timing expression.
	 * <br>
	 *
	 * @param actor
	 * 			The {@link AbstractActor} from which the timing value is requested
	 *
	 * @param component
	 * 			The {@link Component}
	 *
	 * @param timingType
	 * 			The {@link TimingType}
	 *
	 * @return the timing value if the expression is valid, ScenarioConstants.DEFAULT_MISSING_TIMING otherwise.
	 */
	op long evaluateTiming(AbstractActor actor, Component component, TimingType timingType) {
		if (this.actorTimings.containsKey(actor)) {
			val String timingExpression = getTimingOrDefault(actor, component, timingType);
			var long t;
			if ((timingExpression !== null) && (!timingExpression.isEmpty())) {
				t = ExpressionEvaluator.evaluate(actor, timingExpression, scenario.parameterValues.map);
			} else {
				t = ScenarioConstants.DEFAULT_MISSING_TIMING.value;
			}
			return t;
		} else {
			val AbstractActor source = PreesmCopyTracker.getSource(actor);
			if (source !== actor) {
				return evaluateTiming(source, component, timingType);
			}			
		}
		return ScenarioConstants.DEFAULT_MISSING_TIMING.value;
	}

	// TODO Memory values should be moved to SLAM
	contains MemoryInfo[] memTimings opposite timings
}

class ActorTimings wraps java.util.Map$Entry {
	refers Timings timings opposite actorTimings
	// TODO use actor reference ? implement lookup with copy tracker ?
	refers AbstractActor key // the actor path
	contains ActorComponentTimings[] value opposite actorComponentTimings
}

class ActorComponentTimings wraps java.util.Map$Entry {
	refers ActorTimings actorComponentTimings opposite value
	refers Component key // the operator definition ID from the design
	contains ActorTimingValue[] value opposite actorTimings
}

class ActorTimingValue wraps java.util.Map$Entry {
	refers ActorComponentTimings actorTimings opposite value
	TimingType key
	// TODO unit ?
	// TODO expression
	String value // litteral value or expression of the timing;
}

/**
 * TODO Memory values should be moved to SLAM
 */
class MemoryInfo wraps java.util.Map$Entry {
	refers Timings timings opposite memTimings
	refers Component key // the operator definition ID from the design
	contains MemoryCopySpeedValue value opposite memTimings // the timing value
}

/**
 * TODO Memory values should be moved to SLAM
 */
class MemoryCopySpeedValue {
	refers MemoryInfo memTimings opposite value
	long setupTime // TODO unit ?
	double timePerUnit // TODO unit ?
}

/* #####################
 *  		  Papify
 ##################### */
enum PapifyConstants {
	PAPIFY_CONFIGURATION   as "papifyConfig"
	PAPIFY_ACTION_NAME     as "papifyActionName"
	PAPIFY_CONFIG_NUMBER   as "papifyConfigNumber"
	PAPIFY_MONITOR_EVENTS  as "papifyMonitorEvents"
	PAPIFY_MONITOR_TIMING  as "papifyMonitorTiming"
	PAPIFY_COMPONENT_NAME  as "papifyComponentName"
	PAPIFY_ACTOR_NAME      as "papifyActorName"
	PAPIFY_CODESET_SIZE    as "papifyCodeSetSize"
	PAPIFY_EVENTSET_NAMES  as "papifyEventSetNames"
	PAPIFY_COUNTER_CONFIGS as "papifyCounterConfigs"
}

class PapifyConfig {
	refers Scenario scenario opposite papifyConfig
	contains PapiEventInfo papiData opposite papifyConfig
	contains PapifyConfigActor[] papifyConfigGroupsActors
	contains PapifyConfigPE[] papifyConfigGroupsPEs
	String xmlFileURL = ""
	contains PapifyPeTypeEnergyModel[] papifyEnergyKPIModels
	
	op void addComponent(Component slamComponent, PapiComponent papiComponents) {
		addComponent(slamComponent, ECollections.asEList(papiComponents))
	}
	op void addComponent(Component slamComponent, PapiComponent[] papiComponents) {
		if (!this.papifyConfigGroupsPEs.containsKey(slamComponent)) {
			this.papifyConfigGroupsPEs.put(slamComponent, newBasicEList());
		}
		val papiComponentList = papifyConfigGroupsPEs.get(slamComponent)
		val index = ECollections.indexOf(papiComponentList, papiComponents, 0)
		if(index < 0){
			this.papifyConfigGroupsPEs.get(slamComponent).addAll(papiComponents);
		}
	}
	op void removeComponent(Component slamComponent, PapiComponent papiComponents) {
		if (!papifyConfigGroupsPEs.containsKey(slamComponent)) {
			papifyConfigGroupsPEs.put(slamComponent, newBasicEList());
		}
		val papiComponentList = papifyConfigGroupsPEs.get(slamComponent)
		val index = ECollections.indexOf(papiComponentList, papiComponents, 0)
		if (index >= 0) {
			papiComponentList.remove(index)
		}
	}
	op void addActorConfigEvent(AbstractActor actor, String component, PapiEvent event) {
		if (!papifyConfigGroupsActors.containsKey(actor)) {
			papifyConfigGroupsActors.put(actor, ECollections.asEMap(newLinkedHashMap));
		}
		val actorConfig = papifyConfigGroupsActors.get(actor)
		if (!actorConfig.containsKey(component)) {
			actorConfig.put(component, newBasicEList())
		}
		val eventList = actorConfig.get(component)
		val index = ECollections.indexOf(eventList, event, 0)
		if (index < 0) {
			eventList.add(event)
			eventList.sortInplace(e1, e2|e1.getIndex() - e2.getIndex())
		}
	}
	op void removeActorConfigEvent(AbstractActor actor, String component, PapiEvent event) {
		if (!papifyConfigGroupsActors.containsKey(actor)) {
			papifyConfigGroupsActors.put(actor, ECollections.asEMap(newLinkedHashMap));
		}
		val actorConfig = papifyConfigGroupsActors.get(actor)
		if (!actorConfig.containsKey(component)) {
			actorConfig.put(component, newBasicEList())
		}
		val eventList = actorConfig.get(component)
		val index = ECollections.indexOf(eventList, event, 0)
		if (index >= 0) {
			eventList.remove(index)
		}
	}
	op ActorEvent[] getActorConfig(AbstractActor actor) {
		if (this.papifyConfigGroupsActors.containsKey(actor)) {
			return papifyConfigGroupsActors.get(actor)
		} else {
			val AbstractActor source = PreesmCopyTracker.getSource(actor);
			if (source !== actor) {
				return getActorConfig(source)
			} else {
				return ECollections.emptyEMap;
			}
		}
	}
	op boolean hasPapifyConfig(AbstractActor actor) {
		return !getActorConfig(actor).nullOrEmpty
	}
	op boolean isMonitoringEvents(AbstractActor actor) {
		val size = getActorConfig(actor).size
		if (isMonitoringTiming(actor)) {
			return size > 1
		} else {
			return size > 0
		}
	}
	op boolean isMonitoringTiming(AbstractActor actor) {
		return getActorConfig(actor).containsKey("Timing")
	}
	op String[] getActorAssociatedPapiComponents(AbstractActor actor) {
		return getActorConfig(actor).keySet.filter[!(it.equals("Timing"))].asEList.unmodifiableView
	}
	op PapiEvent[] getActorAssociatedEvents(AbstractActor actor) {
		return getActorConfig(actor).filter[it|!(it.key.equals("Timing"))].map[it.value].flatten.asEList.
			unmodifiableView
	}
	op String getActorOriginalIdentifier(AbstractActor actor) {
		var AbstractActor source = PreesmCopyTracker.getOriginalSource(actor);
		return source.vertexPath
	}
	op PapiComponent[] getSupportedPapiComponents(Component component) {
		if (papifyConfigGroupsPEs.containsKey(component)) {
			return papifyConfigGroupsPEs.get(component)
		}
		return ECollections.emptyEList;
	}
	op PapiEvent[] getActorComponentEvents(AbstractActor actor, String componentName) {
		var actorConfig = getActorConfig(actor)
		if (actorConfig.containsKey(componentName)) {
			return actorConfig.get(componentName)
		}
		return ECollections.emptyEList;
	}
	op boolean hasValidPapifyConfig(){
		return !this.papifyConfigGroupsActors.filter[e|!e.value.isEmpty].isEmpty && !this.papifyConfigGroupsPEs.filter[e|!e.value.isEmpty].isEmpty
	}
	op void addEnergyModel(Component component){
		papifyEnergyKPIModels.put(component, ECollections.asEMap(newLinkedHashMap))	
	}
	op PapiEvent getEventByName(String eventName){
		for (component : papiData.components){
			for(eventSet : component.value.eventSets){
				for(event : eventSet.events){
					if(event.name.equals(eventName)){
						return event
					}
				}
			}
		}
		return null
	}
	op void addEnergyParam(Component component, PapiEvent event, Double value){
		if(!papifyEnergyKPIModels.containsKey(component)){
			addEnergyModel(component)
		}
		papifyEnergyKPIModels.get(component).put(event, value)
	}
	op void removeEnergyParam(Component component, PapiEvent event){
		if(papifyEnergyKPIModels.get(component).containsKey(event)){
			papifyEnergyKPIModels.get(component).remove(event)
		}
	}
	op void clear() {
		if (papiData !== null) {
			papiData.components.clear
		}
		papifyConfigGroupsActors.clear
		papifyConfigGroupsPEs.clear
	}
}

class PapifyPeTypeEnergyModel wraps java.util.Map$Entry {
	refers Component key
	contains PapifyModelParam[] value
}

class PapifyModelParam wraps java.util.Map$Entry {
	refers PapiEvent key
	Double value
}

class PapifyConfigPE wraps java.util.Map$Entry {
	refers Component key
	refers PapiComponent[] value
}

class PapifyConfigActor wraps java.util.Map$Entry {
	refers AbstractActor key
	contains ActorEvent[] value
}

class ActorEvent wraps java.util.Map$Entry {
	String key // the operator ID
	refers PapiEvent[] value // set of events to monitor
}

class PapiEventInfo {
	refers PapifyConfig papifyConfig opposite papiData
	contains PapiHardware   hardware
	contains PapiComponentEntry[] components
}

enum PapiComponentType {
	UNKNOWN as "Unknown" = 0
	CPU as "CPU" = 1
}

enum PapiEventSetType {
	NATIVE as "NATIVE" = 0
	PRESET as "PRESET" = 1
}

class PapiComponentEntry wraps java.util.Map$Entry {
	String             key
	contains PapiComponent value
}

class PapiComponent {
	String             ^id
	PapiComponentType  ^type
	int                index
	contains PapiEventSet[] eventSets
	op boolean equals(Object other) {
		if (other instanceof PapiComponent) {
			return this.index === other.index && this.^type == other.^type
		}
		return false
	}
	op int hashCode() {
		Objects.hash(this.index, this.^type);
	}
}

class PapiEventSet {
	contains PapiEvent[] events
	PapiEventSetType ^type
}

class PapiEvent {
	int                     index
	String                  name        = ""
	String                  description = ""
	contains PapiEventModifier[] modifiers
	op boolean equals(Object other) {
		if (other instanceof PapiEvent) {
			return this.index === other.index && this.name == other.name
		}
		return false
	}
	op int hashCode() {
		Objects.hash(this.index, this.name);
	}
}

class PapiEventModifier {
	String name
	String description
}

class PapiHardware {
	contains PapiCpuID cpuID
	String    vendor
	int       vendorCode
	String    model
	int       modelCode
	double    cpuRevision
	int       cpuMaxMegahertz
	int       cpuMinMegahertz
	int threads
	int cores
	int sockets
	int nodes
	int cpuPerNode
	int totalCPUs
}

class PapiCpuID {
	int family
	int model
	int stepping
}

/* #####################
 *  		  Energy
 ##################### */
 
 class EnergyConfig{
	String excelFileURL // excel or csv local file
	refers Scenario scenario opposite energyConfig
 	contains PeActorsEnergy[] algorithmEnergy opposite energyConfig
 	contains PerformanceObjective performanceObjective
 	contains PEPower[] platformPower
 	contains PeCommsEnergy[] commsEnergy
 	
 	
 	
	op void setActorPeEnergy(AbstractActor actor, Component component, long energy) {
		setActorPeEnergy(actor, component, Long.toString(energy))
	}
	op void setActorPeEnergy(AbstractActor actor, Component component, String value) {
		if (!algorithmEnergy.containsKey(actor)) {
			algorithmEnergy.put(actor, ECollections.asEMap(newLinkedHashMap))			
		}
		algorithmEnergy.get(actor).put(component, value)
	}
	op String getEnergyActorOrDefault(AbstractActor actor, Component component) {
		if (this.algorithmEnergy.containsKey(actor)) {
			val EMap<Component, String> map = algorithmEnergy.get(actor);
			if (map.containsKey(component)) {
				return map.get(component);
			}
		} else {
			val AbstractActor source = PreesmCopyTracker.getSource(actor);
			if (source !== actor) {
				return getEnergyActorOrDefault(source, component);
			}
		}
		return Long.toString(ScenarioConstants.DEFAULT_ENERGY_TASK.value);
	}

	op long evaluateEnergyActorOrDefault(AbstractActor actor, Component component) {
		if (this.algorithmEnergy.containsKey(actor)) {
			val String energyExpression = getEnergyActorOrDefault(actor, component);
			var long t;
			if (energyExpression !== null) {
				t = ExpressionEvaluator.evaluate(actor.containingPiGraph, energyExpression, scenario.parameterValues.map);
			} else {
				t = ScenarioConstants.DEFAULT_ENERGY_TASK.value;
			}
			return t;	
		} else {
			val AbstractActor source = PreesmCopyTracker.getSource(actor);
			if (source !== actor) {
				return evaluateEnergyActorOrDefault(source, component);
			}			
		}
		return ScenarioConstants.DEFAULT_ENERGY_TASK.value;		
	}


	op void createNewCommNodeIfNeeded(String source) {
		if (!commsEnergy.containsKey(source)) {
			commsEnergy.put(source, ECollections.asEMap(newLinkedHashMap))			
		}		
	}
	op Double getCommValueOrDefault(String source, String destination){
		if (this.commsEnergy.containsKey(source)) {
			val EMap<String, Double> map = commsEnergy.get(source)
			if (map.containsKey(destination)) {
				return map.get(destination)
			}
		}
		var double value = ScenarioConstants.DEFAULT_ENERGY_COMM.value
		return value		
	}
	op void setCommEnergy(String source, String destination, Double energy) {
		createNewCommNodeIfNeeded(source)		
		commsEnergy.get(source).put(destination, energy)
	}
	op Double getPePowerOrDefault(String componentName){
		if (this.platformPower.containsKey(componentName)) {
			return this.platformPower.get(componentName)
		}
		var double value = ScenarioConstants.DEFAULT_POWER_PE.value
		return value		
	}
	op double getPeTypePowerOrDefault(String peType) {
		if (platformPower.containsKey(peType)) {
			return platformPower.get(peType)			
		}		
		var double value = ScenarioConstants.DEFAULT_POWER_PE.value
		return value
	}
 }
 class PerformanceObjective{
 	double objectiveEPS
 }
class PEPower wraps java.util.Map$Entry {
	String key 		// The component type and the "base" power
	Double value	// The power value
}


class PeActorsEnergy wraps java.util.Map$Entry {
	refers EnergyConfig energyConfig opposite algorithmEnergy
	refers AbstractActor key 			// The actor
	contains ActorEnergy[] value opposite algorithmEnergy	// The actor energy values
}
class ActorEnergy wraps java.util.Map$Entry {
	refers PeActorsEnergy algorithmEnergy opposite value
	refers Component key 	// The component
	String value			// The expression of the energy
}
class PeCommsEnergy wraps java.util.Map$Entry{
	String key		// The source component type
	contains NodeEnergy[] value // The energy value for each destination
}
class NodeEnergy wraps java.util.Map$Entry {
	String key 		// The destination component type
	Double value				// The energy value
}
 
