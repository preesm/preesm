/**
 * Copyright or © or Copr. IETR/INSA - Rennes (2018 - 2020) :
 *
 * Alexandre Honorat [alexandre.honorat@insa-rennes.fr] (2019 - 2020)
 * Antoine Morvan [antoine.morvan@insa-rennes.fr] (2018 - 2019)
 * Daniel Madroñal [daniel.madronal@upm.es] (2019)
 * Dylan Gageot [gageot.dylan@gmail.com] (2019 - 2020)
 * Julien Heulot [julien.heulot@insa-rennes.fr] (2020)
 * Leonardo Suriano [leonardo.suriano@upm.es] (2019)
 *
 * This software is a computer program whose purpose is to help prototyping
 * parallel applications using dataflow formalism.
 *
 * This software is governed by the CeCILL  license under French law and
 * abiding by the rules of distribution of free software.  You can  use,
 * modify and/ or redistribute the software under the terms of the CeCILL
 * license as circulated by CEA, CNRS and INRIA at the following URL
 * "http://www.cecill.info".
 *
 * As a counterpart to the access to the source code and  rights to copy,
 * modify and redistribute granted by the license, users are provided only
 * with a limited warranty  and the software's author,  the holder of the
 * economic rights,  and the successive licensors  have only  limited
 * liability.
 *
 * In this respect, the user's attention is drawn to the risks associated
 * with loading,  using,  modifying and/or developing or reproducing the
 * software by the user in light of its specific status of free software,
 * that may mean  that it is complicated to manipulate,  and  that  also
 * therefore means  that it is reserved for developers  and  experienced
 * professionals having in-depth computer knowledge. Users are therefore
 * encouraged to load and test the software's suitability as regards their
 * requirements in conditions enabling the security of their systems and/or
 * data to be ensured and,  more generally, to use and operate it in the
 * same conditions as regards security.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL license and that you accept its terms.
 */
@GenModel(
	modelName="Codegen", prefix="Codegen",
	modelDirectory="/org.preesm.codegen/ecore-gen",
//	editDirectory="/org.ietr.preesm.codegen.xtend.edit/ecore-gen",
//	editorDirectory="/org.ietr.preesm.codegen.xtend.editor/ecore-gen",
//	testsDirectory="/org.ietr.preesm.codegen.xtend.tests/ecore-gen",

	// redirection="",
	// classNamePattern="",

	// codeFormatting="true",
	// cleanup="true",

	importerID="org.eclipse.emf.importer.ecore",

	// !! if true a instrs.ecore is generated in .impl and is used by xxpackage.init() to
	// load the intrs packages (by default this false unless the generated XyzPackage might
	// exceed Java's byte code limit of 64k)
	loadInitialization="false",
	creationCommands="false",
	creationIcons="false",
	dataTypeConverters="false",
	operationReflection="false",
	complianceLevel="8.0"
)

@Ecore(nsURI="http://org.preesm/model/codegen")

package org.preesm.codegen.model

import org.eclipse.emf.ecore.EEList
import org.preesm.model.pisdf.AbstractActor

class Block extends CodeElt {
	contains readonly CodeElt[] codeElts
	refers readonly Variable[] declarations opposite users
	String name
	contains Variable[] definitions opposite creator
}

interface CodeElt extends Commentable {
}

abstract class Call extends CodeElt {
	transient EEList<Variable> parameters
	String name
	PortDirection[] parameterDirections
	op void addParameter(Variable variable , PortDirection direction) {
	    parameters.add(variable);
	    parameterDirections.add(direction);
	}
	op void removeParameter(Variable variable)
	long factorNumber
}

abstract class Variable extends Commentable {
	id String name
	String ^type
	container Block creator opposite definitions
	refers readonly Block[+] users opposite declarations
	op void reaffectCreator(Block creator) {
      setCreator(creator);
    }
}

class Buffer extends Variable {
	long nbToken
	refers SubBuffer[] childrens opposite ^container
	long tokenTypeSizeInBit // in Bits
	//long size
	transient EEList<range>mergedRange
	boolean ^local = "false"

	op long getTokenTypeSizeInByte() {
		return (tokenTypeSizeInBit + 7L) / 8L;
	}

	op long getSizeInBit() {
		return getNbToken() * getTokenTypeSizeInBit;
	}
	op long getSizeInByte() {
		return (getNbToken() * getTokenTypeSizeInBit + 7L) / 8L;
	}
}

class SubBuffer extends Buffer {
	refers Buffer ^container opposite childrens
	long offsetInBit
	
	
	op long getOffsetInByte() {
		return (offsetInBit + 7L) / 8L;
	}
	
	op void reaffectContainer(Buffer newContainer) {
	    setContainer(newContainer);
	    if (getCreator() !== null) {
	      newContainer.users.add(getCreator());
	    }
	}
	op void reaffectCreator(Block creator) {
        super.reaffectCreator(creator);
	    val Buffer parentBuffer = getContainer();
	    if (parentBuffer !== null) {
	      parentBuffer.getUsers().add(creator);
	    }
    }
}
class DistributedBuffer extends Buffer{
	contains Buffer[] distributedCopies
}

class Constant extends Variable {
	long value
}

class FunctionCall extends Call {
	String actorName
}

class ActorFunctionCall extends FunctionCall {
	refers AbstractActor oriActor
}

class PapifyFunctionCall extends FunctionCall {
	PapifyType papifyType
	boolean opening = "false"
	boolean closing = "false"
}

enum PapifyType {
	EVENTSTART
	EVENTSTOP = 1
	TIMINGSTART = 2
	TIMINGSTOP = 3
	WRITE = 4
	CONFIGACTOR = 5
	CONFIGPE = 6
}

class Communication extends Call {
	Direction direction
	Delimiter delimiter
	refers Buffer data
	refers transient Communication sendStart
	refers transient Communication sendEnd
	refers transient Communication receiveStart
	refers transient Communication receiveEnd
	int ^id
	contains CommunicationNode[+] nodes
	refers transient Communication receiveRelease
	refers transient Communication sendReserve
	boolean redundant = "false"
	op CoreBlock getCoreContainer() {
	    var parent = eContainer();
	    while (!(parent instanceof CoreBlock) && (parent !== null)) {
	      parent = parent.eContainer();
	    }
	    if (parent === null) {
	      return null;
	    } else {
	      return parent as CoreBlock;
	    }
    }
}

enum Direction {
	SEND
	RECEIVE = 1
}

enum Delimiter {
	START
	END = 1
}

class CoreBlock extends Block {
	refers LoopBlock loopBlock
	refers CallBlock initBlock
	refers Buffer[] sinkFifoBuffers
	String coreType
	refers Buffer[] topBuffers//opr
	boolean multinode//opr
	unordered id int coreID
	unordered int nodeID//opr
}

class ClusterBlock extends Block {
	String schedule
	boolean parallel
	boolean containParallelism
}
class ScapeBlock extends Block {
		String initFunc
		refers FunctionCall clusterFunc 
		refers LoopBlock bodyBlock
		refers Block initBlock
		refers Buffer[] sinkFifoBuffers
		refers Buffer[] initBuffers
		String coreType
		unordered id int coreID
	
}

class MainSimsdpBlock extends Block{
		String[] nodeID
		refers Buffer[] buffers
		refers FunctionCall[] subFunc
		String coreType
	
}

class SectionBlock extends Block {
}

class ActorBlock extends Block {
	refers LoopBlock loopBlock
	refers CallBlock initBlock
}

class LoopBlock extends Block {
}

class CallBlock extends Block {
}

class SpecialCall extends Call {
	SpecialType ^type
	refers readonly Buffer[+] inputBuffers
	refers local readonly Buffer[+] outputBuffers
	op boolean isFork() {
		return SpecialType.FORK == ^type
	}
	op boolean isJoin() {
		return SpecialType.JOIN == ^type
	}
	op boolean isBroadcast() {
		return SpecialType.BROADCAST == ^type
	}
	op boolean isRoundBuffer() {
		return SpecialType.ROUND_BUFFER == ^type
	}
	op void addInputBuffer(Buffer buffer) {
		inputBuffers.add(buffer);
    	addParameter(buffer, PortDirection.INPUT);
	}
	op void addOutputBuffer(Buffer buffer) {
		outputBuffers.add(buffer);
    	addParameter(buffer, PortDirection.OUTPUT);
	}
	op void removeInputBuffer(Buffer buffer) {
	    inputBuffers.remove(buffer);
	    removeParameter(buffer);
    }
	op void removeOutputBuffer(Buffer buffer) {
	    outputBuffers.remove(buffer);
	    removeParameter(buffer);
    }
}

enum SpecialType {
	FORK
	JOIN = 1
	BROADCAST = 2
	ROUND_BUFFER = 3
}

class FifoCall extends Call {
	FifoOperation operation
	refers transient FifoCall fifoHead
	refers transient FifoCall fifoTail
	refers Buffer headBuffer
	refers Buffer bodyBuffer
}

enum FifoOperation {
	PUSH
	POP = 1
	INIT = 2
}

abstract class Commentable {
	String comment
}

class CommunicationNode extends Commentable {
	String name
	String ^type
}

class SharedMemoryCommunication extends Communication {
}

class DistributedMemoryCommunication extends Communication {
}

enum PortDirection {
	INPUT
	OUTPUT = 1
	NONE = 2
}

class ConstantString extends Variable {
	String value
}

class NullBuffer extends SubBuffer {
}

type range wraps org.preesm.algorithm.memory.script.Range

class FiniteLoopBlock extends LoopBlock {
	int nbIter
	boolean parallel
	refers IntVar iter
	refers IteratedBuffer[] inBuffers
	refers IteratedBuffer[] outBuffers
}
class FiniteLoopScapeBlock extends LoopBlock {
		int nbIter
		refers IntVar iter
		refers IteratedBuffer[] inBuffers
		refers IteratedBuffer[] outBuffers
}

class IntVar extends Variable {
}

class BufferIterator extends SubBuffer {
	long iterSize
	refers IntVar iter
}

class IteratedBuffer extends Buffer {
	refers Buffer buffer
	refers IntVar iter
}
class DynamicBuffer extends Buffer {
		refers Buffer buffer
	
}

class PapifyAction extends Variable {
	boolean opening = "false"
	boolean closing = "false"
}

class DataTransferAction extends FunctionCall {
	refers readonly Buffer[] buffers
	op void addBuffer(Buffer buffer , PortDirection direction) {
	    buffers.add(buffer);
	    parameterDirections.add(direction);
	}
}

class FreeDataTransferBuffer extends FunctionCall {
	refers readonly Buffer[] buffers
	op void addBuffer(Buffer buffer , PortDirection direction) {
	    buffers.add(buffer);
	    parameterDirections.add(direction);
	}
}

class RegisterSetUpAction extends FunctionCall {
}

class FpgaLoadAction extends FunctionCall {
}

class GlobalBufferDeclaration extends FunctionCall {
	refers readonly Buffer[] buffers
	op void addBuffer(Buffer buffer , PortDirection direction) {
	    buffers.add(buffer);
	    parameterDirections.add(direction);
	}
}

class OutputDataTransfer extends FunctionCall {
	refers readonly Buffer[] buffers
	op void addBuffer(Buffer buffer , PortDirection direction) {
	    buffers.add(buffer);
	    parameterDirections.add(direction);
	}
}
